library(tidyverse)
library(plotly)
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
gesture <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Menkam_Peak_Timings_Apex.csv"))
phone <- read.csv(paste0(dirname(parentfolder), "/DATA_TO_PROCESS/Menkam_Phone.csv"))
load.in.event <- function(time_ms_rec, g_d)
{
output <- character(length = length(time_ms_rec))
output <- NA
for(i in g_d[,1])
{
print(i)
output <- ifelse((time_ms_rec >= g_d[,1][g_d[,1] == i] & time_ms_rec <= g_d[,2][g_d[,1] == i]), as.character(g_d[,3][g_d[,1]==i]), output)
}
return(output)
}
gesture$phone <- load.in.event(gesture$time_ms, phone)
phone_new_ID <- phone
phone_new_ID[,3] <- as.character(1:length(phone_new_ID[,3])) #this just replaces the annotaitons with stringifield identifiers from 1 to N gestures
gesture$gesture_ID <- load.in.event(gesture$time_ms, phone_new_ID) #now add the identifier to the MT dataframe
write.csv(gesture, paste0(data_processed, "Menkam_Phone_Apex.csv"))
library(rstudioapi)    #functions for time series functions (e.g., NA.approx)
library(binhf)
library(tidyverse)
library(plotly)
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
gesture <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Menkam_Peak_Timings_Apex.csv"))
phone <- read.csv(paste0(dirname(parentfolder), "/DATA_TO_PROCESS/Menkam_Phone.csv"))
library(rstudioapi)    #functions for time series functions (e.g., NA.approx)
library(binhf)
library(tidyverse)
library(plotly)
#CODE AUTHORED BY Walter Dych
#Email: wdych@udel.edu
#FOLDER LOCATIONS
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))  #what is the current folder
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
TS <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Joel_MT_STROKE.csv"))      #Load the processed data
TS2 <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Joel_MT_STROKE.csv"))     #Load a temp copy of the dataframe
#TIMING OF PEAK SPEED
TS$peak_speed <- ave(TS$speed, TS$gesture_ID, FUN = max)            #calculate the max speed
TS$peak_speed[is.na(TS$gesture_ID)] <-NA                            #ignore NA events
TS$peak_speed <- ifelse(TS$peak_speed == TS$speed, TS$speed, NA)    #keep only one observation of peak speed
TS$timing_peak_speed <- ifelse(!is.na(TS$peak_speed), TS$time_ms, NA) #timing of when peak speed occurs
#MIN SPEED
TS$min_speed <- ave(TS$speed, TS$gesture_ID, FUN = min)             #calculate the min speed
TS$min_speed[is.na(TS$gesture_ID)] <-NA                             #ignore NA events
TS$min_speed <- ifelse(TS$min_speed == TS$speed, TS$speed, NA)      #keep only one observation of min speed
TS$timing_min_speed <- ifelse(!is.na(TS$min_speed), TS$time_ms, NA) #timing of when min speed occurs
#SPEED AT STROKE START
first <- TS[match(unique(TS$gesture_ID), TS$gesture_ID),] #filter down to only the first instance of each gesture phase, the phase start
first <- first %>%      #rename columns
rename(
gesture_ID_first = gesture_ID,
speed_first = speed,
)
#hacked together way to remove everything I don't want
TS <- base::merge(TS, select(first, -X.1, -X, -env, -x_index_right, -y_index_right, -speed_UNsmooth, -x_index_right_S, -y_index_right_S, -gesture_t, -peak_speed, -timing_peak_speed, -min_speed, -timing_min_speed), by = "time_ms", all.x = TRUE)
#Filtering out all gesture phases to only calculate thresholds for strokes
TS$gesture_t[TS$gesture_t=="P  "] <- NA
TS$gesture_t[TS$gesture_t=="P"] <- NA
TS$gesture_t[TS$gesture_t=="P "] <- NA
TS$gesture_t[TS$gesture_t==" P"] <- NA
TS$gesture_t[TS$gesture_t=="H"] <- NA
TS$gesture_t[TS$gesture_t=="R "] <- NA
TS$gesture_t[TS$gesture_t==" R"] <- NA
TS$gesture_t[TS$gesture_t==""] <- NA
TS$gesture_t[TS$gesture_t==" S"] <- "S"
TS <- TS %>% drop_na("gesture_t")
#calculate threshold
threshold <- (TS$speed_first[!is.na(TS$speed_first)]-TS$min_speed[!is.na(TS$min_speed)])/(TS$peak_speed[!is.na(TS$peak_speed)]-TS$min_speed[!is.na(TS$min_speed)])
print(threshold)
#threshold mean
meanth <- mean(as.numeric(threshold),na.rm=TRUE)
thdf <- as.data.frame(threshold)                    #create a threshold dataframe
TS <- TS %>% drop_na("gesture_ID_first")            #allows for thresholds to align with rest of data
TS$threshold <- threshold                           #create column for threshold
#plot threshold density
thpt <- ggplot(thdf, aes(x= threshold, color = "threshold")) + geom_density() + geom_vline(xintercept = meanth, color= "violet") + ggtitle("Threshold Distribution of Stroke Start") + theme_bw()
ggplotly(thpt)
#merge back other gesture phases
TS <- base::merge(TS2, select(TS, -gesture_ID, -speed, -X.1, -X, -env, -x_index_right, -y_index_right, -speed_UNsmooth, -x_index_right_S, -y_index_right_S, -gesture_t, -peak_speed, -timing_peak_speed, -min_speed, -timing_min_speed), by="time_ms", all = TRUE)
#create a shifted column
TS$shift <- shift(TS$gesture_t, places = 1)
#check the threshold value for each "stroke" occuring with a "prep" before it
prep_precede <- subset(TS, gesture_t=="S" & shift=="P")$threshold
ppdf <- as.data.frame(prep_precede)
meanpp <- mean(as.numeric(prep_precede),na.rm = TRUE)
pppt <- ggplot(ppdf, aes(x= prep_precede, color = "threshold")) + geom_density() + geom_vline(xintercept = meanpp, color= "violet") + ggtitle("Threshold Distribution When P precedes S") + theme_bw()
ggplotly(pppt)
#check the threshold value for each "stroke" occuring with a "hold" before it
hold_precede <- subset(TS, gesture_t=="S" & shift=="H")$threshold
hpdf <- as.data.frame(hold_precede)
meanhp <- mean(as.numeric(hold_precede), na.rm = TRUE)
hppt <- ggplot(hpdf, aes(x= hold_precede, color = "threshold")) + geom_density() + geom_vline(xintercept = meanhp, color= "violet") + ggtitle("Threshold Distribution When H precedes S") + theme_bw()
ggplotly(hppt)
library(rstudioapi)    #functions for time series functions (e.g., NA.approx)
library(binhf)
library(tidyverse)
library(plotly)
#CODE AUTHORED BY Walter Dych
#Email: wdych@udel.edu
#FOLDER LOCATIONS
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))  #what is the current folder
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
TS <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Nina_MT_STROKE.csv"))      #Load the processed data
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
data_to_process <- paste0(dirname(parentfolder), "/DATA_TO_PROCESS/")
#LOAD IN APEX TEXTGRID AND PROCESSED STROKE FILE
apex <- read.csv(paste0(dirname(parentfolder), "/DATA_TO_PROCESS/Menkam_Apex_TEXTGRID.csv"))
stroke <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Menkam_MT_STROKE.csv"))
#TIMING OF PEAK SPEED
stroke$peak_speed <- ave(stroke$speed, stroke$gesture_ID, FUN = max)              #CALCULATE MAX SPEED
stroke$peak_speed[is.na(stroke$gesture_ID)] <-NA                                  #REMOVE NA EVENTS
stroke$peak_speed <- ifelse(stroke$peak_speed == stroke$speed, stroke$speed, NA)  #KEEP ONLY PEAK SPEED OBSERVATION
stroke$timing_peak_speed <- ifelse(!is.na(stroke$peak_speed), stroke$time_ms, NA) #TIME WHEN PEAK SPEED OCCURS
#SIMPLIFY DATAFRAME
stroke <- stroke[, c("time_ms", "speed", "gesture_t", "gesture_ID", "peak_speed", "timing_peak_speed")]
#FILTER OUT ALL ROWS WITHOUT "S"
stroke <- stroke %>% filter(grepl("S", gesture_t, fixed = TRUE))
#DROP NA VALUES IN THE PEAK SPEED COLUMN
stroke <- stroke %>% drop_na(timing_peak_speed)
#SETUP AND SIMPLIFY THE APEX TEXTGRID
apex <- rename(apex, t1_ax = Begin.Time...msec)
apex$Manual.Apex[apex$Manual.Apex==""] <- NA
apex <- apex %>% drop_na(Manual.Apex)
#MERGE APEX AND STROKE FILES
merged <- cbind(stroke, apex)
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
data_to_process <- paste0(dirname(parentfolder), "/DATA_TO_PROCESS/")
#LOAD IN APEX TEXTGRID AND PROCESSED STROKE FILE
apex <- read.csv(paste0(dirname(parentfolder), "/DATA_TO_PROCESS/Deborah_Apex_TEXTGRID.csv"))
stroke <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Deborah_MT_STROKE.csv"))
#TIMING OF PEAK SPEED
stroke$peak_speed <- ave(stroke$speed, stroke$gesture_ID, FUN = max)              #CALCULATE MAX SPEED
stroke$peak_speed[is.na(stroke$gesture_ID)] <-NA                                  #REMOVE NA EVENTS
stroke$peak_speed <- ifelse(stroke$peak_speed == stroke$speed, stroke$speed, NA)  #KEEP ONLY PEAK SPEED OBSERVATION
stroke$timing_peak_speed <- ifelse(!is.na(stroke$peak_speed), stroke$time_ms, NA) #TIME WHEN PEAK SPEED OCCURS
#SIMPLIFY DATAFRAME
stroke <- stroke[, c("time_ms", "speed", "gesture_t", "gesture_ID", "peak_speed", "timing_peak_speed")]
#FILTER OUT ALL ROWS WITHOUT "S"
stroke <- stroke %>% filter(grepl("S", gesture_t, fixed = TRUE))
#DROP NA VALUES IN THE PEAK SPEED COLUMN
stroke <- stroke %>% drop_na(timing_peak_speed)
#SETUP AND SIMPLIFY THE APEX TEXTGRID
apex <- rename(apex, t1_ax = Begin.Time...msec)
apex$Manual.Apex[apex$Manual.Apex==""] <- NA
apex <- apex %>% drop_na(Manual.Apex)
#MERGE APEX AND STROKE FILES
merged <- cbind(stroke, apex)
#CALCULATE TIMING DIFFERENCES (Manual minus Computational)
merged$difference <- (merged$t1_ax[!is.na(merged$t1_ax)]) - (merged$timing_peak_speed[!is.na(merged$timing_peak_speed)])
#EXPORT TO .CSV FILE
write.csv(merged, paste0(data_processed, "Deborah_Manual_Comp_Dif.csv"))
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
data_to_process <- paste0(dirname(parentfolder), "/DATA_TO_PROCESS/")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
data_to_process <- paste0(dirname(parentfolder), "/DATA_TO_PROCESS/")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file)
P[[i]] <- df
}
file_names
data_processed
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
data_to_process <- paste0(dirname(parentfolder), "/DATA_TO_PROCESS/")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
P[[i]] <- df
}
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- file.path(dirname(parentfolder), "DATA_PROCESSED")
data_to_process <- file.path(dirname(parentfolder), "DATA_TO_PROCESS")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
P[[i]] <- list(number = i, data = df)
}
# Show the first 5 rows of each data frame in the P list
lapply(P, function(x) head(x$data))
View(P)
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- file.path(dirname(parentfolder), "DATA_PROCESSED")
data_to_process <- file.path(dirname(parentfolder), "DATA_TO_PROCESS")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
assign(paste0("P", i), df)
P[[i]] <- get(paste0("P", i))
}
# Show the first 5 rows of each data frame in the P list
lapply(P, function(x) head(x))
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- file.path(dirname(parentfolder), "DATA_PROCESSED")
data_to_process <- file.path(dirname(parentfolder), "DATA_TO_PROCESS")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
assign(paste0("P", i), df)
P[[i]] <- get(paste0("P", i))
}
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- file.path(dirname(parentfolder), "DATA_PROCESSED")
data_to_process <- file.path(dirname(parentfolder), "DATA_TO_PROCESS")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
assign(paste0("P", i), df)
P[[i]] <- get(paste0("P", i))
}
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- file.path(dirname(parentfolder), "DATA_PROCESSED")
data_to_process <- file.path(dirname(parentfolder), "DATA_TO_PROCESS")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
assign(paste0("P", i), df)
P[[i]] <- get(paste0("P", i))
}
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- file.path(dirname(parentfolder), "DATA_PROCESSED")
data_to_process <- file.path(dirname(parentfolder), "DATA_TO_PROCESS")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
assign(paste0("P", i), df)
P[[i]] <- get(paste0("P", i))
}
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- file.path(dirname(parentfolder), "DATA_PROCESSED")
data_to_process <- file.path(dirname(parentfolder), "DATA_TO_PROCESS")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
assign(paste0("P", i), df)
P[[i]] <- get(paste0("P", i))
}
# Combine all P1, P2, P3, etc. data frames into a single data frame called combined_df
combined_df <- bind_rows(P)
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- file.path(dirname(parentfolder), "DATA_PROCESSED")
data_to_process <- file.path(dirname(parentfolder), "DATA_TO_PROCESS")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
assign(paste0("P", i), df %>% mutate(Participant = paste0("Participant ", i)))
P[[i]] <- get(paste0("P", i))
}
# Combine all P1, P2, P3, etc. data frames into a single data frame called combined_df
combined_df <- bind_rows(P)
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- file.path(dirname(parentfolder), "DATA_PROCESSED")
data_to_process <- file.path(dirname(parentfolder), "DATA_TO_PROCESS")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
assign(paste0("P", i), df %>% mutate(Participant = paste0("Participant ", i)))
P[[i]] <- get(paste0("P", i))
}
# Combine all P1, P2, P3, etc. data frames into a single data frame called combined_df
combined_df <- bind_rows(P)
mean_diff <- mean(combined_df$difference)
mean_diff
lower <- mean_diff - 1.96*sd(combined_df$difference)
lower
upper <- mean_diff + 1.96*sd(combined_df$difference)
upper
combined_df$avg <- rowMeans(combined_df[, c("time_ms", "t1_ax")])
plot <- ggplot(df, aes(x = avg, y = difference, color = Participant)) +
geom_point(size=1) + scale_y_continuous(breaks=seq(-500, 500, 50)) +
geom_hline(yintercept = mean_diff) +
geom_hline(yintercept = lower, color = "red", linetype="dashed") +
geom_hline(yintercept = upper, color = "red", linetype="dashed") +
ggtitle("Bland-Altman Plot") +
ylab("Apex Timing Differences") +
xlab("Average")+theme_bw()
ggplotly(plot)
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- file.path(dirname(parentfolder), "DATA_PROCESSED")
data_to_process <- file.path(dirname(parentfolder), "DATA_TO_PROCESS")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
assign(paste0("P", i), df %>% mutate(Participant = paste0("Participant ", i)))
P[[i]] <- get(paste0("P", i))
}
# Combine all P1, P2, P3, etc. data frames into a single data frame called combined_df
combined_df <- bind_rows(P)
mean_diff <- mean(combined_df$difference)
mean_diff
lower <- mean_diff - 1.96*sd(combined_df$difference)
lower
upper <- mean_diff + 1.96*sd(combined_df$difference)
upper
combined_df$avg <- rowMeans(combined_df[, c("time_ms", "t1_ax")])
plot <- ggplot(combined_df, aes(x = avg, y = difference, color = Participant)) +
geom_point(size=1) + scale_y_continuous(breaks=seq(-500, 500, 50)) +
geom_hline(yintercept = mean_diff) +
geom_hline(yintercept = lower, color = "red", linetype="dashed") +
geom_hline(yintercept = upper, color = "red", linetype="dashed") +
ggtitle("Bland-Altman Plot") +
ylab("Apex Timing Differences") +
xlab("Average")+theme_bw()
ggplotly(plot)
write.csv(combined_df, paste0(data_processed, "All_Participants_Manual_Comp_Apex_Dif.csv"))
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- file.path(dirname(parentfolder), "DATA_PROCESSED")
data_to_process <- file.path(dirname(parentfolder), "DATA_TO_PROCESS")
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
assign(paste0("P", i), df %>% mutate(Participant = paste0("Participant ", i)))
P[[i]] <- get(paste0("P", i))
}
# Combine all P1, P2, P3, etc. data frames into a single data frame called combined_df
combined_df <- bind_rows(P)
mean_diff <- mean(combined_df$difference)
mean_diff
lower <- mean_diff - 1.96*sd(combined_df$difference)
lower
upper <- mean_diff + 1.96*sd(combined_df$difference)
upper
combined_df$avg <- rowMeans(combined_df[, c("time_ms", "t1_ax")])
plot <- ggplot(combined_df, aes(x = avg, y = difference, color = Participant)) +
geom_point(size=1) + scale_y_continuous(breaks=seq(-1000, 1000, 250)) +
geom_hline(yintercept = mean_diff) +
geom_hline(yintercept = lower, color = "red", linetype="dashed") +
geom_hline(yintercept = upper, color = "red", linetype="dashed") +
ggtitle("Bland-Altman Plot") +
ylab("Apex Timing Differences") +
xlab("Average")+theme_bw()
ggplotly(plot)
write.csv(combined_df, paste0(data_processed, "All_Participants_Manual_Comp_Apex_Dif.csv"))
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- file.path(dirname(parentfolder), "DATA_PROCESSED")
data_to_process <- file.path(dirname(parentfolder), "DATA_TO_PROCESS")
#List files with corresponding file name pattern
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
#Load files into data frames and create unique data frames per participant, label participant numbers
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
assign(paste0("P", i), df %>% mutate(Participant = paste0("Participant ", i)))
P[[i]] <- get(paste0("P", i))
}
#Combine all P1, P2, P3, etc. data frames into a single data frame called combined_df
combined_df <- bind_rows(P)
#Calculate data points for plotting
mean_diff <- mean(combined_df$difference)
mean_diff
lower <- mean_diff - 1.96*sd(combined_df$difference)
lower
upper <- mean_diff + 1.96*sd(combined_df$difference)
upper
combined_df$avg <- rowMeans(combined_df[, c("time_ms", "t1_ax")])
#Create the Bland-Altman plot of the combined data
plot <- ggplot(combined_df, aes(x = avg, y = difference, color = Participant)) +
geom_point(size=1) + scale_y_continuous(breaks=seq(-1000, 1000, 250)) +
geom_hline(yintercept = mean_diff) +
geom_hline(yintercept = lower, color = "red", linetype="dashed") +
geom_hline(yintercept = upper, color = "red", linetype="dashed") +
ggtitle("Bland-Altman Plot") +
ylab("Apex Timing Differences") +
xlab("Average")+theme_bw()
ggplotly(plot)
#Save combined file
write.csv(combined_df, paste0(data_processed, "All_Participants_Manual_Comp_Apex_Dif.csv"))
#Save combined file
write.csv(combined_df, paste0("All_Participants_Manual_Comp_Apex_Dif.csv"))
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- file.path(dirname(parentfolder), "DATA_PROCESSED")
data_to_process <- file.path(dirname(parentfolder), "DATA_TO_PROCESS")
#List files with corresponding file name pattern
file_names <- list.files(data_processed, pattern = "_Manual_Comp_Dif.csv")
P <- list()
#Load files into data frames and create unique data frames per participant, label participant numbers
for (i in seq_along(file_names)) {
file <- file_names[i]
df <- read.csv(file.path(data_processed, file))
assign(paste0("P", i), df %>% mutate(Participant = paste0("Participant ", i)))
P[[i]] <- get(paste0("P", i))
}
#Combine all P1, P2, P3, etc. data frames into a single data frame called combined_df
combined_df <- bind_rows(P)
#Calculate data points for plotting
mean_diff <- mean(combined_df$difference)
mean_diff
lower <- mean_diff - 1.96*sd(combined_df$difference)
lower
upper <- mean_diff + 1.96*sd(combined_df$difference)
upper
combined_df$avg <- rowMeans(combined_df[, c("time_ms", "t1_ax")])
#Create the Bland-Altman plot of the combined data
plot <- ggplot(combined_df, aes(x = avg, y = difference, color = Participant)) +
geom_point(size=1) + scale_y_continuous(breaks=seq(-1000, 1000, 250)) +
geom_hline(yintercept = mean_diff) +
geom_hline(yintercept = lower, color = "red", linetype="dashed") +
geom_hline(yintercept = upper, color = "red", linetype="dashed") +
ggtitle("Bland-Altman Plot") +
ylab("Apex Timing Differences") +
xlab("Average")+theme_bw()
ggplotly(plot)
#Save combined file
write.csv(combined_df, file.path(data_processed, "All_Participants_Manual_Comp_Apex_Dif.csv"), row.names = FALSE)
