axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14)) +
scale_y_continuous(breaks = seq(from = floor(min_diff/100)*100, to = ceiling(max_diff/100)*100,
ggplot(TS, aes(x = avg, y = difference, color = Participant)) +
theme() +
geom_point(size=1) +
geom_hline(yintercept = mean_diff) +
geom_hline(yintercept = lower, color = "red", linetype="dashed") +
geom_hline(yintercept = upper, color = "red", linetype="dashed") +
ggtitle("Manual vs. Computational Apex Differences") +
ylab("Apex Timing Differences (msec)") +
xlab("Average") + theme_bw() + theme(text = element_text(size = 20),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14)) +
scale_y_continuous(breaks = seq(from = floor(min_diff/100)*100, to = ceiling(max_diff/100)*100, by = 100))
ggplot(TS, aes(x = avg, y = difference, color = Participant)) +
ggplot(TS, aes(x = avg, y = difference, color = Participant)) +
theme() +
geom_point(size=1) +
geom_hline(yintercept = mean_diff) +
geom_hline(yintercept = lower, color = "red", linetype="dashed") +
geom_hline(yintercept = upper, color = "red", linetype="dashed") +
ggtitle("Manual vs. Computational Apex Differences") +
ylab("Apex Timing Differences (msec)") +
xlab("Average") + theme_bw() +
theme(text = element_text(size = 20),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14)) + scale_y_continuous(breaks = seq(from = floor(min_diff/100)*100, to = ceiling(max_diff/100)*100, by = 100))
ggplot(TS, aes(x = avg, y = difference, color = Participant)) +
theme() +
geom_point(size=2) +
geom_hline(yintercept = mean_diff) +
geom_hline(yintercept = lower, color = "red", linetype="dashed") +
geom_hline(yintercept = upper, color = "red", linetype="dashed") +
ggtitle("Manual vs. Computational Apex Differences") +
ylab("Apex Timing Differences (msec)") +
xlab("Average") + theme_bw() +
theme(text = element_text(size = 20),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14)) + scale_y_continuous(breaks = seq(from = floor(min_diff/100)*100, to = ceiling(max_diff/100)*100, by = 100))
ggplot(TS, aes(x = avg, y = difference, color = Participant)) +
theme() +
geom_point(size=3) +
geom_hline(yintercept = mean_diff) +
geom_hline(yintercept = lower, color = "red", linetype="dashed") +
geom_hline(yintercept = upper, color = "red", linetype="dashed") +
ggtitle("Manual vs. Computational Apex Differences") +
ylab("Apex Timing Differences (msec)") +
xlab("Average") + theme_bw() +
theme(text = element_text(size = 20),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14)) + scale_y_continuous(breaks = seq(from = floor(min_diff/100)*100, to = ceiling(max_diff/100)*100, by = 100))
ggplot(TS, aes(x = avg, y = difference, color = Participant)) +
theme() +
geom_point(size=3) +
geom_hline(yintercept = mean_diff, size = 3) +
geom_hline(yintercept = lower, color = "red", linetype="dashed", size = 3) +
geom_hline(yintercept = upper, color = "red", linetype="dashed", size = 3) +
ggtitle("Manual vs. Computational Apex Differences") +
ylab("Apex Timing Differences (msec)") +
xlab("Average") + theme_bw() +
theme(text = element_text(size = 20),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14)) + scale_y_continuous(breaks = seq(from = floor(min_diff/100)*100, to = ceiling(max_diff/100)*100, by = 100))
ggplot(TS, aes(x = avg, y = difference, color = Participant)) +
theme() +
geom_point(size=3) +
geom_hline(yintercept = mean_diff, size = 1) +
geom_hline(yintercept = lower, color = "red", linetype="dashed", size = 1) +
geom_hline(yintercept = upper, color = "red", linetype="dashed", size = 1) +
ggtitle("Manual vs. Computational Apex Differences") +
ylab("Apex Timing Differences (msec)") +
xlab("Average") + theme_bw() +
theme(text = element_text(size = 20),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14)) + scale_y_continuous(breaks = seq(from = floor(min_diff/100)*100, to = ceiling(max_diff/100)*100, by = 100))
ggplot(TS, aes(x = avg, y = difference, color = Participant)) +
theme() +
geom_point(size=3) +
geom_hline(yintercept = mean_diff, size = 1.25) +
geom_hline(yintercept = lower, color = "red", linetype="dashed", size = 1.25) +
geom_hline(yintercept = upper, color = "red", linetype="dashed", size = 1.25) +
ggtitle("Manual vs. Computational Apex Differences") +
ylab("Apex Timing Differences (msec)") +
xlab("Average") + theme_bw() +
theme(text = element_text(size = 20),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14)) + scale_y_continuous(breaks = seq(from = floor(min_diff/100)*100, to = ceiling(max_diff/100)*100, by = 100))
library(rstudioapi)    #functions for time series functions (e.g., NA.approx)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
data_to_process <- paste0(dirname(parentfolder), "/DATA_TO_PROCESS/")
P1M <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Benedicte_Mapex_To_Phone.csv"))
P2M <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Bertrand_Mapex_To_Phone.csv"))
P3M <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Deborah_Mapex_To_Phone.csv"))
#P4 <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Menkam_Mapex_To_Phone.csv"))
P1M$Participant <- "Participant 1"
P2M$Participant <- "Participant 2"
P3M$Participant <- "Participant 3"
#P4$Participant <- "Participant 4"
MAPEX_PHONE_ALL <- bind_rows(P1M, P2M, P3M)
MAPEX_PHONE_ALL <- MAPEX_PHONE_ALL %>% filter(shift_phone != "sp")
MAPEX_PHONE_ALL <- MAPEX_PHONE_ALL %>% filter(shift_phone != "NA")
P1C <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Benedicte_Capex_To_Phone.csv"))
P2C <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Bertrand_Capex_To_Phone.csv"))
P3C <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Deborah_Capex_To_Phone.csv"))
#P4 <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Menkam_Capex_To_Phone.csv"))
P1C$Participant <- "Participant 1"
P2C$Participant <- "Participant 2"
P3C$Participant <- "Participant 3"
#P4$Participant <- "Participant 4"
CAPEX_PHONE_ALL <- bind_rows(P1C, P2C, P3C)
CAPEX_PHONE_ALL <- CAPEX_PHONE_ALL %>% filter(shift_phone != "sp")
CAPEX_PHONE_ALL <- CAPEX_PHONE_ALL %>% filter(shift_phone != "NA")
colnames(MAPEX_PHONE_ALL)[colnames(MAPEX_PHONE_ALL) == "Begin.Time...msec"] <- "time_ms"
MAPEX_PHONE_ALL <- select(MAPEX_PHONE_ALL, Participant, time_ms, difference, shift_phone)
CAPEX_PHONE_ALL <- select(CAPEX_PHONE_ALL, Participant, time_ms, difference, shift_phone)
write.csv(CAPEX_PHONE_ALL, paste0(data_processed, "CAPEX_PHONE_ALL.csv"))
CAPEX_PHONE_ALL <- read.csv(paste0(data_processed, "CAPEX_PHONE_ALL.csv"))
MAPEX_PHONE_ALL$group <- "Manual Apex"
CAPEX_PHONE_ALL$group <- "OpenPose Apex"
box <- ggplot(rbind(CAPEX_PHONE_ALL, MAPEX_PHONE_ALL), aes(x = group, y = difference, fill = group)) +
geom_boxplot() +
theme(text = element_text(size = 20),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(margin = margin(r = 15)),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14)) +
xlab("Method") + ylab("Time to Phone (msec)") +
ggtitle("Comparison of Manual vs. OpenPose Apex to Phone times") +
facet_grid(. ~ Participant) +
scale_fill_discrete(name = "") +
scale_y_continuous(breaks = seq(0, 1600, 100))
CAPEX_PHONE_ALL <- select(CAPEX_PHONE_ALL, Participant, time_ms, difference, shift_phone)
MAPEX_PHONE_ALL <- select(MAPEX_PHONE_ALL, Participant, time_ms, difference, shift_phone)
write.csv(CAPEX_PHONE_ALL, paste0(data_processed, "CAPEX_PHONE_ALL.csv"))
MAPEX_PHONE_ALL$group <- "Manual Apex"
CAPEX_PHONE_ALL$group <- "OpenPose Apex"
box <- ggplot(rbind(CAPEX_PHONE_ALL, MAPEX_PHONE_ALL), aes(x = group, y = difference, fill = group)) +
geom_boxplot() +
theme(text = element_text(size = 20),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(margin = margin(r = 15)),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14)) +
xlab("Method") + ylab("Time to Phone (msec)") +
ggtitle("Comparison of Manual vs. OpenPose Apex to Phone times") +
facet_grid(. ~ Participant) +
scale_fill_discrete(name = "") +
scale_y_continuous(breaks = seq(0, 1600, 100))
ggplotly(box)
box <- ggplot(rbind(CAPEX_PHONE_ALL, MAPEX_PHONE_ALL), aes(x = group, y = difference, fill = group)) +
geom_boxplot() +
theme(text = element_text(size = 20),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(margin = margin(r = 15)),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14)) +
xlab("Method") + ylab("Time to Phone (msec)") +
ggtitle("Comparison of Manual vs. OpenPose Apex to Phone times") +
facet_grid(. ~ Participant) +
scale_fill_discrete(name = "") +
scale_y_continuous(breaks = seq(0, 8000, 200))
ggplotly(box)
box <- ggplot(rbind(CAPEX_PHONE_ALL, MAPEX_PHONE_ALL), aes(x = group, y = difference, fill = group)) +
geom_boxplot() +
theme(text = element_text(size = 20),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(margin = margin(r = 15)),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14)) +
xlab("Method") + ylab("Time to Phone (msec)") +
ggtitle("Comparison of Manual vs. OpenPose Apex to Phone times") +
facet_grid(. ~ Participant) +
scale_fill_discrete(name = "") +
scale_y_continuous(breaks = seq(0, 9000, 500))
ggplotly(box)
box <- ggplot(rbind(CAPEX_PHONE_ALL, MAPEX_PHONE_ALL), aes(x = group, y = difference, fill = group)) +
geom_boxplot() +
theme(text = element_text(size = 14),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(margin = margin(r = 15)),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14)) +
xlab("Method") + ylab("Time to Vowel (msec)") +
ggtitle("Comparison of Manual vs. OpenPose Apex to Vowel times") +
facet_grid(. ~ Participant) +
scale_fill_discrete(name = "") +
scale_y_continuous(breaks = seq(0, 9000, 500))
ggplotly(box)
box <- ggplot(rbind(CAPEX_PHONE_ALL, MAPEX_PHONE_ALL), aes(x = group, y = difference, fill = group)) +
geom_boxplot() +
theme(text = element_text(size = 14),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(margin = margin(r = 15)),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14)) +
xlab("Method") + ylab("Time to Vowel (msec)") +
ggtitle("Comparison of Manual vs. OpenPose Apex to Vowel times") +
facet_grid(. ~ Participant) +
scale_fill_discrete(name = "") +
scale_y_continuous(breaks = seq(0, 9000, 250))
ggplotly(box)
write.csv(CAPEX_PHONE_ALL, paste0(data_processed, "CAPEX_PHONE_ALL.csv"))
write.csv(MAPEX_PHONE_ALL, paste0(data_processed, "MAPEX_PHONE_ALL.csv"))
CAPEX_PHONE_ALL <- read.csv(paste0(data_processed, "CAPEX_PHONE_ALL.csv"))
MAPEX_PHONE_ALL <- read.csv(paste0(data_processed, "MAPEX_PHONE_ALL.csv"))
box <- ggplot(rbind(CAPEX_PHONE_ALL, MAPEX_PHONE_ALL), aes(x = group, y = difference, fill = group)) +
geom_boxplot() +
theme(text = element_text(size = 14),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(margin = margin(r = 15)),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14)) +
xlab("Method") + ylab("Time to Vowel (msec)") +
ggtitle("Comparison of Manual vs. OpenPose Apex to Vowel times") +
facet_grid(. ~ Participant) +
scale_fill_discrete(name = "") +
scale_y_continuous(breaks = seq(0, 9000, 250))
ggplotly(box)
mapex_avg <- mean(MAPEX_PHONE_ALL$difference)
print(mapex_avg)
capex_avg <- mean(CAPEX_PHONE_ALL$difference)
print(capex_avg)
box <- ggplot(rbind(CAPEX_PHONE_ALL, MAPEX_PHONE_ALL), aes(x = group, y = difference, fill = group)) +
geom_boxplot() +
theme(text = element_text(size = 14),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(margin = margin(r = 15)),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14)) +
xlab("Method") + ylab("Time to Vowel (msec)") +
ggtitle("Comparison of Manual vs. OpenPose Apex to Vowel times") +
facet_grid(. ~ Participant) +
scale_fill_discrete(name = "") +
scale_y_continuous(breaks = seq(0, 9000, 200))
ggplotly(box)
box <- ggplot(rbind(CAPEX_PHONE_ALL, MAPEX_PHONE_ALL), aes(x = group, y = difference, fill = group)) +
geom_boxplot() +
theme(text = element_text(size = 18),
axis.title.y = element_text(margin = margin(t = 20)),
axis.text.y = element_text(margin = margin(r = 15)),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 14)) +
xlab("Method") + ylab("Time to Vowel (msec)") +
ggtitle("Comparison of Manual vs. OpenPose Apex to Vowel times") +
facet_grid(. ~ Participant) +
scale_fill_discrete(name = "") +
scale_y_continuous(breaks = seq(0, 9000, 200))
ggplotly(box)
# Load required libraries
library(rstudioapi)
library(ggplot2)
library(plotly)
library(matlab)
# Author: Walter Dych
# Questions?: wdych@udel.edu
############################################ Load In Files and Directories
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path)) #Get the parent folder of the source file
TS <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Benedicte_MT_p.csv")) # Read in the Motion Tracking data from the DATA_PROCESSED folder
library(rstudioapi)    #functions for time series functions (e.g., NA.approx)
library(binhf)
library(tidyverse)
library(plotly)
#CODE AUTHORED BY Walter Dych
#Email: wdych@udel.edu
#FOLDER LOCATIONS
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))  #what is the current folder
TS <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Deborah_MT_GT.csv"))      #Load the processed data
TS2 <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Deborah_MT_GT.csv"))     #Load a temp copy of the dataframe
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
#TIMING OF PEAK SPEED
TS$peak_speed <- ave(TS$speed, TS$gesture_ID, FUN = max)            #calculate the max speed
TS$peak_speed[is.na(TS$gesture_ID)] <-NA                            #ignore NA events
TS$peak_speed <- ifelse(TS$peak_speed == TS$speed, TS$speed, NA)    #keep only one observation of peak speed
TS$timing_peak_speed <- ifelse(!is.na(TS$peak_speed), TS$time_ms, NA) #timing of when peak speed occurs
#MIN SPEED
TS$min_speed <- ave(TS$speed, TS$gesture_ID, FUN = min)             #calculate the min speed
TS$min_speed[is.na(TS$gesture_ID)] <-NA                             #ignore NA events
TS$min_speed <- ifelse(TS$min_speed == TS$speed, TS$speed, NA)      #keep only one observation of min speed
TS$timing_min_speed <- ifelse(!is.na(TS$min_speed), TS$time_ms, NA) #timing of when min speed occurs
#SPEED AT STROKE START
first <- TS[match(unique(TS$gesture_ID), TS$gesture_ID),] #filter down to only the first instance of each gesture phase, the phase start
first <- first %>%      #rename columns
rename(
gesture_ID_first = gesture_ID,
speed_first = speed,
)
#hacked together way to remove everything I don't want
TS <- base::merge(TS, select(first, -X.1, -X, -env, -x_index_right, -y_index_right, -speed_UNsmooth, -x_index_right_S, -y_index_right_S, -gesture_t, -peak_speed, -timing_peak_speed, -min_speed, -timing_min_speed), by = "time_ms", all.x = TRUE)
#Some Filtering
TS$gesture_t[TS$gesture_t==""] <- NA
TS <- TS %>% drop_na("gesture_t")
#calculate threshold
threshold <- (TS$speed_first[!is.na(TS$speed_first)]-TS$min_speed[!is.na(TS$min_speed)])/(TS$peak_speed[!is.na(TS$peak_speed)]-TS$min_speed[!is.na(TS$min_speed)])
print(threshold)
#threshold mean
meanth <- mean(as.numeric(threshold),na.rm=TRUE)
thdf <- as.data.frame(threshold)                    #create a threshold dataframe
TS <- TS %>% drop_na("gesture_ID_first")            #allows for thresholds to align with rest of data
TS$threshold <- threshold                      #create column for threshold
#plot threshold density
thpt <- ggplot(TS, aes(x= threshold, color = gesture_t)) + geom_density() + ggtitle("Deborah Threshold Based on Gesture Type") + theme_bw()
ggplotly(thpt)
#write to file
write.csv(TS, paste0(data_processed, "Deborah_Peak_Timings_GT.csv"))
library(rstudioapi)
library(ggplot2)
library(plotly)
library(matlab)
#author/questions?: Wim Pouw (wimpouw@gmail.com)
#Edited: Walter Dych (wdych@udel.edu)
#CITATION OF TUTORIAL:
#    Trujillo, J. P., & Pouw, W. (2019). Using video-based motion tracking to quantify speech-gesture synchrony.
#    Proceedings of the 6th meeting of Gesture and Speech in Interaction. Paderborn, Germany.
#CITATION OF CODE:
#    Pouw, W., Trujillo, J. P. (2019). Tutorial Gespin2019 - Using video-based motion tracking to quantify speech-gesture
#     synchrony. doi: 10.17605/OSF.IO/RXB8J
####################################FUNCTIONS
#this function loads into a time series annotations dataframes with columns (begintime, endtime, annotation)
load.in.event <- function(time_ms_rec, g_d)
{
output <- character(length = length(time_ms_rec))
output <- NA
for(i in g_d[,1])
{
print(i)
output <- ifelse((time_ms_rec >= g_d[,1][g_d[,1] == i] & time_ms_rec <= g_d[,2][g_d[,1] == i]), as.character(g_d[,3][g_d[,1]==i]), output)
}
return(output)
}
###########################FOLDER LOCATIONS
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))  #what is the current folder
data_to_process <- paste0(dirname(parentfolder), "/DATA_TO_PROCESS/") #get the folder for MT and SOUND data
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/") #get the folder for final saving
##########LOAD IN FILES
annot <-  read.csv(paste0(data_to_process, "Menkam_MT_STROKE.csv"))
MT <-  read.csv(paste0(data_to_process, "Menkam_GS.csv"))
############################
#load in for each row of the the time series whether a gesture event ocurred
#first the annotations themselves (REP vs. BEAT)
MT$gesture_t <- load.in.event(MT$time_ms, annot)
#we also just want for each gestur event a unique identifier so we can later loop through them
annot_new_ID <- annot
annot_new_ID[,3] <- as.character(1:length(annot_new_ID[,3])) #this just replaces the annotaitons with stringifield identifiers from 1 to N gestures
MT$gesture_ID <- load.in.event(MT$time_ms, annot_new_ID) #now add the identifier to the MT dataframe
#NOW WE CAN SELECT RELEVANT Time series chunks! lets select a gesture and plot amplitude envelope with speed
whichgesture <- "8"
Pspeed <- ggplot(MT[MT$gesture_ID == whichgesture,], aes(x=time_ms, y = speed)) + geom_point(color = "blue") + theme_bw() + ylab("gesture speed")
Penv <- ggplot(MT[MT$gesture_ID == whichgesture,], aes(x=time_ms, y = env)) + geom_point(color = "black") + theme_bw()+ ylab("speech amplitude")
subplot(ggplotly(Pspeed), ggplotly(Penv), nrows=2,titleY = TRUE)
#SAVE THE FINAL PROCESSED DATASET
write.csv(MT, paste0(data_processed, "Menkam_MT_STROKE.csv"))
setwd("C:/Users/cosmo/Desktop/OPENPOSE_WORKFLOW_REPO/SCRIPTS")
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
data_to_process <- paste0(dirname(parentfolder), "/DATA_TO_PROCESS/")
TS <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Benedicte_MT_STROKE.csv")) #Calculated Apex for Stroke tier
phone <- read.csv(paste0(dirname(parentfolder), "/DATA_TO_PROCESS/Benedicte_Phone.csv")) #ELAN phone textgrid
TS$peak_speed <- ave(TS$speed, TS$gesture_ID, FUN = max)            #calculate the max speed
TS$peak_speed[is.na(TS$gesture_ID)] <-NA                            #ignore NA events
TS$peak_speed <- ifelse(TS$peak_speed == TS$speed, TS$speed, NA)    #keep only one observation of peak speed
TS$timing_peak_speed <- ifelse(!is.na(TS$peak_speed), TS$time_ms, NA) #timing of when peak speed occurs
colnames(phone)[colnames(phone) == "Begin.Time...msec"] <- "time_ms"
colnames(phone)[colnames(phone) == "MeDuMBa.TraNScriPTioN...phone"] <- "MeDuMBa...phone"
phone <- phone %>% filter(grepl("1", MeDuMBa...phone)) #Comment out if looking for phone not vowel
TS <- TS %>% filter(str_detect(gesture_t, "S"))
TS$gesture_t[TS$timing_peak_speed==""] <- NA
TS <- TS %>% filter(timing_peak_speed != "NA")
TS <- select(TS, time_ms, gesture_ID, timing_peak_speed, gesture_t)
merged_ax_phone <- merge(TS, phone, by = "time_ms", all = TRUE)
merged_ax_phone$shift_phone <- shift(merged_ax_phone$MeDuMBa...phone, places = -1)
merged_ax_phone$shift_time <- shift(merged_ax_phone$time_ms, places = -1)
merged_ax_phone <- merged_ax_phone %>% filter(timing_peak_speed != "NA")
merged_ax_phone$difference <- (merged_ax_phone$shift_time - merged_ax_phone$timing_peak_speed)
write.csv(merged_ax_phone, paste0(data_processed, "Benedicte_Capex_To_Vowel.csv"))
write.csv(merged_ax_phone, paste0(data_processed, "Bertrand_Capex_To_Vowel.csv"))
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
data_to_process <- paste0(dirname(parentfolder), "/DATA_TO_PROCESS/")
TS <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Bertrand_MT_STROKE.csv")) #Calculated Apex for Stroke tier
phone <- read.csv(paste0(dirname(parentfolder), "/DATA_TO_PROCESS/Bertrand_Phone.csv")) #ELAN phone textgrid
TS$peak_speed <- ave(TS$speed, TS$gesture_ID, FUN = max)            #calculate the max speed
TS$peak_speed[is.na(TS$gesture_ID)] <-NA                            #ignore NA events
TS$peak_speed <- ifelse(TS$peak_speed == TS$speed, TS$speed, NA)    #keep only one observation of peak speed
TS$timing_peak_speed <- ifelse(!is.na(TS$peak_speed), TS$time_ms, NA) #timing of when peak speed occurs
colnames(phone)[colnames(phone) == "Begin.Time...msec"] <- "time_ms"
colnames(phone)[colnames(phone) == "MeDuMBa.TraNScriPTioN...phone"] <- "MeDuMBa...phone"
phone <- phone %>% filter(grepl("1", MeDuMBa...phone)) #Comment out if looking for phone not vowel
TS <- TS %>% filter(str_detect(gesture_t, "S"))
TS$gesture_t[TS$timing_peak_speed==""] <- NA
TS <- TS %>% filter(timing_peak_speed != "NA")
TS <- select(TS, time_ms, gesture_ID, timing_peak_speed, gesture_t)
merged_ax_phone <- merge(TS, phone, by = "time_ms", all = TRUE)
merged_ax_phone$shift_phone <- shift(merged_ax_phone$MeDuMBa...phone, places = -1)
merged_ax_phone$shift_time <- shift(merged_ax_phone$time_ms, places = -1)
merged_ax_phone <- merged_ax_phone %>% filter(timing_peak_speed != "NA")
merged_ax_phone$difference <- (merged_ax_phone$shift_time - merged_ax_phone$timing_peak_speed)
write.csv(merged_ax_phone, paste0(data_processed, "Bertrand_Capex_To_Vowel.csv"))
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
data_to_process <- paste0(dirname(parentfolder), "/DATA_TO_PROCESS/")
TS <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Deborah_MT_STROKE.csv")) #Calculated Apex for Stroke tier
phone <- read.csv(paste0(dirname(parentfolder), "/DATA_TO_PROCESS/Deborah_Phone.csv")) #ELAN phone textgrid
TS$peak_speed <- ave(TS$speed, TS$gesture_ID, FUN = max)            #calculate the max speed
TS$peak_speed[is.na(TS$gesture_ID)] <-NA                            #ignore NA events
TS$peak_speed <- ifelse(TS$peak_speed == TS$speed, TS$speed, NA)    #keep only one observation of peak speed
TS$timing_peak_speed <- ifelse(!is.na(TS$peak_speed), TS$time_ms, NA) #timing of when peak speed occurs
colnames(phone)[colnames(phone) == "Begin.Time...msec"] <- "time_ms"
colnames(phone)[colnames(phone) == "MeDuMBa.TraNScriPTioN...phone"] <- "MeDuMBa...phone"
phone <- phone %>% filter(grepl("1", MeDuMBa...phone)) #Comment out if looking for phone not vowel
TS <- TS %>% filter(str_detect(gesture_t, "S"))
TS$gesture_t[TS$timing_peak_speed==""] <- NA
TS <- TS %>% filter(timing_peak_speed != "NA")
TS <- select(TS, time_ms, gesture_ID, timing_peak_speed, gesture_t)
merged_ax_phone <- merge(TS, phone, by = "time_ms", all = TRUE)
merged_ax_phone$shift_phone <- shift(merged_ax_phone$MeDuMBa...phone, places = -1)
merged_ax_phone$shift_time <- shift(merged_ax_phone$time_ms, places = -1)
merged_ax_phone <- merged_ax_phone %>% filter(timing_peak_speed != "NA")
merged_ax_phone$difference <- (merged_ax_phone$shift_time - merged_ax_phone$timing_peak_speed)
write.csv(merged_ax_phone, paste0(data_processed, "Deborah_Capex_To_Vowel.csv"))
library(rstudioapi)
library(binhf)
library(tidyverse)
library(plotly)
parentfolder <- (dirname(rstudioapi::getSourceEditorContext()$path))
data_processed <- paste0(dirname(parentfolder), "/DATA_PROCESSED/")
data_to_process <- paste0(dirname(parentfolder), "/DATA_TO_PROCESS/")
TS <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Menkam_MT_STROKE.csv")) #Calculated Apex for Stroke tier
phone <- read.csv(paste0(dirname(parentfolder), "/DATA_TO_PROCESS/Menkam_Phone.csv")) #ELAN phone textgrid
TS$peak_speed <- ave(TS$speed, TS$gesture_ID, FUN = max)            #calculate the max speed
TS$peak_speed[is.na(TS$gesture_ID)] <-NA                            #ignore NA events
TS$peak_speed <- ifelse(TS$peak_speed == TS$speed, TS$speed, NA)    #keep only one observation of peak speed
TS$timing_peak_speed <- ifelse(!is.na(TS$peak_speed), TS$time_ms, NA) #timing of when peak speed occurs
colnames(phone)[colnames(phone) == "Begin.Time...msec"] <- "time_ms"
colnames(phone)[colnames(phone) == "MeDuMBa.TraNScriPTioN...phone"] <- "MeDuMBa...phone"
phone <- phone %>% filter(grepl("1", MeDuMBa...phone)) #Comment out if looking for phone not vowel
TS <- TS %>% filter(str_detect(gesture_t, "S"))
TS$gesture_t[TS$timing_peak_speed==""] <- NA
TS <- TS %>% filter(timing_peak_speed != "NA")
TS <- select(TS, time_ms, gesture_ID, timing_peak_speed, gesture_t)
merged_ax_phone <- merge(TS, phone, by = "time_ms", all = TRUE)
merged_ax_phone$shift_phone <- shift(merged_ax_phone$MeDuMBa...phone, places = -1)
merged_ax_phone$shift_time <- shift(merged_ax_phone$time_ms, places = -1)
merged_ax_phone <- merged_ax_phone %>% filter(timing_peak_speed != "NA")
merged_ax_phone$difference <- (merged_ax_phone$shift_time - merged_ax_phone$timing_peak_speed)
write.csv(merged_ax_phone, paste0(data_processed, "Menkam_Capex_To_Vowel.csv"))
P1C <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Benedicte_Capex_To_Vowel.csv"))
P2C <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Bertrand_Capex_To_Vowel.csv"))
P3C <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Deborah_Capex_To_Vowel.csv"))
P4C <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Menkam_Capex_To_Vowel.csv"))
P1C$Participant <- "Participant 1"
P2C$Participant <- "Participant 2"
P3C$Participant <- "Participant 3"
P4C$Participant <- "Participant 4"
CAPEX_Vowel_ALL <- bind_rows(P1C, P2C, P3C, P4C)
CAPEX_Vowel_ALL <- CAPEX_Vowel_ALL %>% filter(shift_Vowel != "sp")
P1C <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Benedicte_Capex_To_Vowel.csv"))
P2C <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Bertrand_Capex_To_Vowel.csv"))
P3C <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Deborah_Capex_To_Vowel.csv"))
P4C <- read.csv(paste0(dirname(parentfolder), "/DATA_PROCESSED/Menkam_Capex_To_Vowel.csv"))
P1C$Participant <- "Participant 1"
P2C$Participant <- "Participant 2"
P3C$Participant <- "Participant 3"
P4C$Participant <- "Participant 4"
CAPEX_Vowel_ALL <- bind_rows(P1C, P2C, P3C, P4C)
CAPEX_Vowel_ALL <- CAPEX_Vowel_ALL %>% filter(shift_phone != "sp")
CAPEX_Vowel_ALL <- CAPEX_Vowel_ALL %>% filter(shift_phone != "NA")
boxplot <- ggplot(CAPEX_Vowel_ALL, aes(x = Participant, y = difference)) +
ggtitle("Computational Apex to Vowel Comparison") +
geom_boxplot() +
labs(y = "Time to Vowel (msec)") +
scale_y_continuous(breaks = seq(-500, 2000, 100))
ggplotly(boxplot)
write.csv(CAPEX_Vowel_ALL, paste0(data_processed, "CAPEX_TO_VOWEL_MERGED.csv"))
